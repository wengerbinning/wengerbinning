内核使用4个数据接口表示打开的文件，分别是：文件描述符表（文件描述符标志与文件表项的指针）、文件表（文件
状态、当前文件偏移量以及v-node表项的指针）、v-node结构（文件类型与对此文件进行各种操作的指针以及i-node
结构）、i-node结构（文件所有者、文件长度、指向文件实际数据块在磁盘上所在位置的指针）。


在UNIX系统中，文件I/O只需要使用5个函数：open、read、write、lseek与close，就可以完成文件的基本操作。

在这类函数中通常成为不带缓存的I/O(unbuffered I/O)

对内核而言，所有的打开文件都是通过的文件描述符引用。文件描述符是一个非负整数。UNIX中，文件描述符为0与进程
的标准输入关联，文件描述符为1与进程的标准输出关联，文件描述符为2与进程的标准错误关联。

```c
int open (const char *path, int oflag, ...);
```

open函数用于打开文件，path是文件的路径，oflag表示打开的模式。返回一个文件描述符。

```c
int openat (int fd, const char *path, int oflag, ...);
```
openat函数也用于打开文件与open类似。返回一个文件描述符。

```c
int creat (const char *path, mode_t mode);
```

creat函数用于创建一个新文件，该文件是以只写的方式打开。

```c
int close (int fd);
```

close函数用来关闭一个打开的文件。在进程终止时会关闭所有打开的文件。

```c
off_t lseek (int fd, off_t offset, int whence);
```

lseek函数用于显式的设置打开文件的当前文件偏移量(current file offset)。offset与whence有关，当whence是
SEEK_SET时，将该文件的偏移量设置为距文件开始处offset个字节；是SEEK_CUR时，则将该文件的偏移量设置为当前值加
offset,此时offset可以为负值，是SEEK_END时，则将该文件的偏移量设置为文件长度加offset。返回新的文件偏移量。

每一个打开的文件都会有一个与其相关联的“当前文件偏移量(current file offset)”，通常是一个非负数，用以度量从文
件开始计算的字节数。通常读写文件都是从当前文件偏移量处开始，并使偏移量增加所读写的字节数。在打开文件时，除使用
O_APPEND选项，否则该偏移量被设置为0。

当文件描述符指向一个管道、FIFO或网络套接字，则lseek返回-1,并将errno设置为ESPIPE。


```c
ssize_t read (int fd, void *buf, size_t nbytes);
```

read函数用于从打开的文件读出数据。

```c
sszie_t write (int fd, const void *buf, size_t nbytes);
```

write函数用于向打开的文件写入数据。

```c
ssize_t pread (int fd, void *buf, size_t nbytes, off_t offset);
```

pread函数等效于lseek之后read。

```c
ssize_t pwrite (int fd, const void *buf, size_t nbytes, off_t offset);
```

pwrite函数等效于lsweek之后write。

```c
int dup(int fd);
```

dup函数用于复制一个现有的文件描述符fd，根据参数fd，返回一个文件描述符表中最小的一个可用的文件描述符，与fd指向同一个文件表。

```c
int dup2(int fd, int fd2);
```

dup2函数也用于复制一个现有的文件描述符fd，但是需要使用第二个参数指定新的描述符，若指定的描述符已经打开，则先将其关闭再复制。

```c
void sync (void);
```

sync函数将所有修改的块缓存区排入写队列。

```c
int fsync (int fd);
```

fsync函数只对有文件描述符fd指定的一个文件起作用，并且等待写磁盘操作完成才返回。

```c
int fdatasync (int fd);
```

fdatasync函数只数据部分起作用，不影响文件的属性，fsync函数会影响文件的属性。

```c
int fcntl (int fd, int cmd, ...);
```

fcntl函数用于改变打开文件的属性。

```c
int ioctl (int fd, int request, ...);
```

ioctl函数I/O操作的杂物箱。

------

在对文件进行操作时，需要遵循原子操作(atomic operation):由多步组成的一个操作，仅有成功与失败两种状态。
